# -*- coding: utf-8 -*-
"""
/****************************************************************************
 CustomCatalogSettingsDialog
                                 A QGIS plugin
 Create your own catalog based on various sources and versions
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-11-02
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Nicolas AUBIN
        email                : aubinnic@gmail.com
 ****************************************************************************/

/****************************************************************************
 *                                                                          *
 *   This program is free software: you can redistribute it and/or modify   *
 *   it under the terms of the GNU General Public License as published by   *
 *   the Free Software Foundation, either version 3 of the License, or      *
 *   (at your option) any later version.                                    *
 *                                                                          *
 *   This program is distributed in the hope that it will be useful,        *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
 *   GNU General Public License for more details.                           *
 *                                                                          *
 *   You should have received a copy of the GNU General Public License      *
 *   along with this program.  If not, see <https://www.gnu.org/licenses/>. *
 *                                                                          *
 ****************************************************************************/
"""

import json
import os

from qgis.PyQt import QtWidgets, uic, QtCore
from qgis.core import Qgis, QgsSettings

from .globals import log, catalog_type_values, settings_file, load_settings, cbx_defaults_authid
from .edit_catalog import CustomCatalogEditCatalog
from .add_setting import CustomCatalogAddSettingDialog
from .db_connection import CustomCatalogAddConnexionDialog

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), '../ui/custom_catalog_settings.ui'))


class CustomCatalogSettingsDialog(QtWidgets.QDialog, FORM_CLASS):

    settingsSaved = QtCore.pyqtSignal()
    catalogEdited = QtCore.pyqtSignal()
    catalogDeleted = QtCore.pyqtSignal()
    settingsClosed = QtCore.pyqtSignal()

    def __init__(self, parent=None):
        QtWidgets.QDialog.__init__(self, parent)
        self.setupUi(self)
        # Init table widget
        self.table = self.catalogsTable
        # Define columns IDs and names
        self.catalog_col_id = 0
        self.catalog_col_name = self.tr("Name")
        self.type_col_id = 1
        self.type_col_name = self.tr("Type")
        self.link_col_id = 2
        self.link_col_name = self.tr("Link")
        self.browse_col_id = 3
        self.filedialog_col_name = self.tr("")
        self.qgisauthconfigid_col_id = 4
        self.qgisauthconfigid_col_name = self.tr("Auth conf id")
        # Build table content
        self.build_settings_dialog()

        self.btnDel.clicked.connect(self.__on_btndel_clicked)
        self.btnAdd.clicked.connect(self.__on_btnadd_clicked)
        self.btnSave.clicked.connect(self.sav_settings)
        self.btnEdit.clicked.connect(self.__on_btnedit_clicked)

    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        return QtCore.QCoreApplication.translate('CustomCatalogSettingsDialog', message)

    def __on_btnadd_clicked(self):
        self.add_dialog = CustomCatalogAddSettingDialog()
        self.add_dialog.settingAdded.connect(self.__on_setting_added)
        self.add_dialog.settingClosed.connect(self.__on_add_dialog_closed)
        self.add_dialog.exec_()

    def __on_add_dialog_closed(self):
        self.add_dialog.settingAdded.disconnect()
        self.add_dialog.settingClosed.disconnect()
        self.add_dialog = None

    def __on_setting_added(self, setting_name, setting_type, setting_link, setting_authid):
        self.add_setting(setting_name, setting_type, setting_link, setting_authid)
        self.resize_columns_tablewidget()

    def __on_btnedit_clicked(self):
        rows = []
        for index in self.table.selectedIndexes():
            rows.append(index.row())

        if len(rows) == 1:
            catalog_path = self.table.item(rows[0], self.link_col_id).text()
            catalog_name = self.table.item(rows[0], self.catalog_col_id).text()
            catalog_type = self.table.cellWidget(rows[0], self.type_col_id).currentText()
            catalog_authid = self.table.cellWidget(rows[0], self.qgisauthconfigid_col_id).currentText()
            # Define edit dialog
            self.edit_dialog = CustomCatalogEditCatalog(None, catalog_name, catalog_path, catalog_type, catalog_authid)
            # Connect to signal when catalog saved
            self.edit_dialog.catalogSaved.connect(self.__on_editcatalog_saved)
            self.edit_dialog.catalogClosed.connect(self.__on_edit_dialog_closed)
            # Open dialog
            self.edit_dialog.exec_()
        elif len(rows) == 0:
            log(self.tr("Select one catalog"), Qgis.Warning)
        else:
            log(self.tr("Only one catalog can be modified"), Qgis.Warning)

    def __on_edit_dialog_closed(self):
        self.edit_dialog.catalogSaved.disconnect()
        self.edit_dialog.catalogClosed.disconnect()
        self.edit_dialog = None

    def __on_editcatalog_saved(self):
        self.catalogEdited.emit()

    def __on_btndel_clicked(self):
        rows = set()
        for index in self.table.selectedIndexes():
            rows.add(index.row())

        for row in sorted(rows, reverse=True):
            log(self.tr("Catalog deleted") + " : " + self.table.item(row, self.catalog_col_id).text(), Qgis.Info)
            self.table.removeRow(row)

        self.catalogDeleted.emit()

    def __on_btn_browse_clicked(self, row_pos):
        current_path = self.table.item(row_pos, self.link_col_id).text()
        source_type = self.table.cellWidget(row_pos, self.type_col_id).currentText()
        if source_type == "json":
            if os.path.exists(current_path):
                current_dir = os.path.dirname(current_path)
            else:
                current_dir = None
            dlg = QtWidgets.QFileDialog()
            new_file_path = dlg.getOpenFileName(None, self.tr("Select setting file"), current_dir,
                                                self.tr("JSON File") + " (*.json)")[0]
            if new_file_path:
                self.table.setItem(row_pos, self.link_col_id, QtWidgets.QTableWidgetItem(new_file_path))
        elif source_type in ["PostgreSQL", "SQLite"]:
            catalog_name = self.table.item(row_pos, self.catalog_col_id).text()
            self.cnx_dialog = CustomCatalogAddConnexionDialog(catalog_name=catalog_name, current_uri=current_path, db_type=source_type)
            self.cnx_dialog.connectionDefined.connect(self.table.item(row_pos, self.link_col_id).setText)
            self.cnx_dialog.dialogClosed.connect(self.__on_connexiondialog_closed)
            self.cnx_dialog.exec_()

    def __on_connexiondialog_closed(self):
        self.cnx_dialog.connectionDefined.disconnect()
        self.cnx_dialog.dialogClosed.disconnect()

    def build_settings_dialog(self):
        col_labels = [self.catalog_col_name, self.type_col_name, self.link_col_name, self.filedialog_col_name,
                      self.qgisauthconfigid_col_name]
        self.table.setColumnCount(len(col_labels))
        self.table.setHorizontalHeaderLabels(col_labels)
        self.table.horizontalHeader().setMinimumSectionSize(30)
        self.table.verticalHeader().setVisible(False)
        self.build_settings()
        self.resize_columns_tablewidget()

    def build_settings(self):
        settings = load_settings()
        for setting in settings['catalogs']:
            if self.check_keys_settings(setting):
                setting_name = setting['name']
                setting_type = setting['type']
                setting_link = setting['link']
                if 'qgisauthconfigid' in setting and len(setting['qgisauthconfigid']) != 0:
                    setting_authid = setting['qgisauthconfigid']
                else:
                    setting_authid = None

                self.add_setting(setting_name, setting_type, setting_link, setting_authid)

    def add_setting(self, setting_name, setting_type, setting_link, setting_authid):
        row_pos = self.table.rowCount()
        self.table.insertRow(row_pos)
        self.table.setItem(row_pos, self.catalog_col_id, QtWidgets.QTableWidgetItem(setting_name))
        self.table.setCellWidget(row_pos, self.type_col_id, self.cbx_type(setting_type))
        self.table.setItem(row_pos, self.link_col_id, QtWidgets.QTableWidgetItem(setting_link))
        btn = QtWidgets.QPushButton("...")
        btn.setMaximumWidth(30)
        btn.clicked.connect(lambda: self.__on_btn_browse_clicked(row_pos))
        self.table.setCellWidget(row_pos, self.browse_col_id, btn)
        self.table.setCellWidget(row_pos, self.qgisauthconfigid_col_id, cbx_defaults_authid(setting_authid))

    def resize_columns_tablewidget(self):
        if isinstance(self.table, QtWidgets.QTableWidget):
            col_count = self.table.columnCount()
            for i in range(col_count - 1):
                self.table.resizeColumnToContents(i)
            self.table.setColumnWidth(self.link_col_id, 300)

    def sav_settings(self, check_only=False):
        if isinstance(self.table, QtWidgets.QTableWidget):
            setting = []
            for row_id in range(self.table.rowCount()):
                setting.append({"name": self.table.item(row_id, self.catalog_col_id).text(),
                                "type": self.table.cellWidget(row_id, self.type_col_id).currentText(),
                                "link": self.table.item(row_id, self.link_col_id).text(),
                                "qgisauthconfigid": self.table.cellWidget(row_id,
                                                                          self.qgisauthconfigid_col_id).currentText()})
            settings = {"catalogs": setting}
            old_settings = load_settings()
            if settings == old_settings:
                if check_only:
                    return False
                else:
                    log(self.tr("No updated setting found"), Qgis.Info)
            else:
                if check_only:
                    return True
                else:
                    with open(settings_file, 'w') as outfile:
                        json.dump(settings, outfile, indent=2)
                        log(self.tr("Settings saved"), Qgis.Info)
                    self.settingsSaved.emit()

    def check_keys_settings(self, setting):
        if "name" not in setting:
            log(self.tr("Key missing in settings file"), Qgis.Warning, self.tr("Key 'name' missing"))
            return False
        elif "type" not in setting:
            log(self.tr("Key missing in settings file"), Qgis.Warning,
                self.tr("Key 'type' missing in setting") + " " + setting['name'])
            return False
        elif "link" not in setting:
            log(self.tr("Key missing in settings file"), Qgis.Warning,
                self.tr("Key 'link' missing in setting") + " " + setting['name'])
            return False
        else:
            return True

    def cbx_type(self, default_value):
        values = catalog_type_values()
        cbx = QtWidgets.QComboBox()
        cbx.addItems(values)
        cbx.setCurrentText(default_value)
        return cbx

    def closeEvent(self, event):
        if self.sav_settings(check_only=True):
            settings_close_dialog = QtWidgets.QMessageBox()
            settings_close_dialog.setIcon(QtWidgets.QMessageBox.Warning)
            settings_close_dialog.setText(self.tr("New settings detected, are you sure to close settings ?"))
            settings_close_dialog.setWindowTitle(self.tr("New settings detected"))
            settings_close_dialog.setStandardButtons(QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No)

            close_settings = settings_close_dialog.exec()
            if close_settings == QtWidgets.QMessageBox.Yes:
                self.settingsClosed.emit()
                event.accept()
            else:
                event.ignore()
        else:
            self.settingsClosed.emit()
            event.accept()
