# -*- coding: utf-8 -*-
"""
/****************************************************************************
 CustomCatalogAddSettingDialog
                                 A QGIS plugin
 Create your own catalog based on various sources and versions
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-11-02
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Nicolas AUBIN
        email                : aubinnic@gmail.com
 ****************************************************************************/

/****************************************************************************
 *                                                                          *
 *   This program is free software: you can redistribute it and/or modify   *
 *   it under the terms of the GNU General Public License as published by   *
 *   the Free Software Foundation, either version 3 of the License, or      *
 *   (at your option) any later version.                                    *
 *                                                                          *
 *   This program is distributed in the hope that it will be useful,        *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
 *   GNU General Public License for more details.                           *
 *                                                                          *
 *   You should have received a copy of the GNU General Public License      *
 *   along with this program.  If not, see <https://www.gnu.org/licenses/>. *
 *                                                                          *
 ****************************************************************************/
"""

import os

from qgis.PyQt import QtWidgets, uic, QtCore
from qgis.core import Qgis

from .globals import log, build_cbx_type, build_cbx_authid, init_catalog_data
from .db_connection import CustomCatalogAddConnexionDialog

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), '../ui/custom_catalog_add_setting.ui'))


class CustomCatalogAddSettingDialog(QtWidgets.QDialog, FORM_CLASS):

    settingAdded = QtCore.pyqtSignal(str, str, str, str)
    settingClosed = QtCore.pyqtSignal()

    def __init__(self, parent=None):
        QtWidgets.QDialog.__init__(self, parent)
        self.setupUi(self)
        build_cbx_type(self.cbxType)
        build_cbx_authid(self.cbxAuthId)
        self.buttonBox.accepted.connect(self.__on_ok_clicked)
        self.btn_ok = self.buttonBox.button(QtWidgets.QDialogButtonBox.Ok)
        self.btn_ok.setEnabled(False)
        # Define signals actions
        self.tbxName.textChanged.connect(self.disable_button)
        self.tbxLink.textChanged.connect(self.disable_button)
        self.cbxType.currentTextChanged.connect(self.__on_type_changed)
        self.btnOpenFile.clicked.connect(self.__on_openfile_clicked)
        self.btnCreateFile.clicked.connect(self.__on_createfile_clicked)
        self.btnConnectDb.clicked.connect(self.__on_connect_clicked)
        # Init buttons visibility
        self.__on_type_changed(self.cbxType.currentText())

    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        return QtCore.QCoreApplication.translate('CustomCatalogAddSettingDialog', message)

    def disable_button(self):
        if self.tbxName.text() != "" and self.tbxLink.text() != "":
            self.btn_ok.setEnabled(True)
        else:
            self.btn_ok.setEnabled(False)

    def __on_type_changed(self, type):
        if type == "json":
            self.btnConnectDb.setVisible(False)
            self.btnOpenFile.setVisible(True)
            self.btnCreateFile.setVisible(True)
        elif type == "PostgreSQL":
            self.btnConnectDb.setVisible(True)
            self.btnOpenFile.setVisible(False)
            self.btnCreateFile.setVisible(False)

    def check_catalog_name(self):
        catalog_name = self.tbxName.text()
        if catalog_name is None or catalog_name == "":
            log("Catalog name should be defined", Qgis.Warning)
            return False
        else:
            return True

    def __on_createfile_clicked(self):
        if self.check_catalog_name():
            catalog_name = self.tbxName.text()
            dlg = QtWidgets.QFileDialog()
            setting_path = dlg.getSaveFileName(None, self.tr("Select setting file"), None, self.tr("JSON File") + " (*.json)")[0]
            catalog_data = init_catalog_data(catalog_name, indent=2)
            if setting_path:
                with open(setting_path, 'w') as outfile:
                    outfile.write(catalog_data + '\n')
                self.tbxLink.setText(setting_path)

    def __on_openfile_clicked(self):
        if self.check_catalog_name():
            dlg = QtWidgets.QFileDialog()
            setting_path = dlg.getOpenFileName(None, self.tr("Select setting file"), None, self.tr("JSON File") + " (*.json)")[0]
            if setting_path:
                self.tbxLink.setText(setting_path)

    def __on_connect_clicked(self):
        if self.check_catalog_name():
            catalog_name = self.tbxName.text()
            self.cnx_dialog = CustomCatalogAddConnexionDialog(catalog_name=catalog_name)
            self.cnx_dialog.connectionDefined.connect(self.tbxLink.setText)
            self.cnx_dialog.dialogClosed.connect(self.__on_connexiondialog_closed)
            self.cnx_dialog.exec_()

    def __on_connexiondialog_closed(self):
        self.cnx_dialog.connectionDefined.disconnect()
        self.cnx_dialog.dialogClosed.disconnect()

    def __on_ok_clicked(self):
        if self.check_new_setting():
            setting_name = self.tbxName.text()
            setting_type = self.cbxType.currentText()
            setting_link = self.tbxLink.text()
            if self.cbxAuthId.currentText() == "":
                setting_authid = None
            else:
                setting_authid = self.cbxAuthId.currentText()
            self.settingAdded.emit(setting_name, setting_type, setting_link, setting_authid)

    def check_new_setting(self):
        valid = True
        if self.tbxName.text() == "":
            log(self.tr("Catalog name should not be empty"), Qgis.Warning)
            valid = False
        elif self.tbxLink.text() == "":
            log(self.tr("Catalog link should not be empty"), Qgis.Warning)
            valid = False
        return valid

    def closeEvent(self, event):
        self.settingClosed.emit()
        event.accept()
